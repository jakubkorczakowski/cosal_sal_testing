import pathlib
import argparse

import torchvision.models as models

from DDT.DDT_cosal import DDT
from utils.config import MODELS_TO_TEST


def parse_args():
    parser = argparse.ArgumentParser(description='Process some integers.')
    parser.add_argument(
        '--train_dir', type=pathlib.Path,
        help='Path to directory containing training images.'
    )
    parser.add_argument(
        '--sal_dir', type=pathlib.Path,
        help='Path to directory containing saliency map generated by your method.'
    )   
    parser.add_argument(
        '--save_dir', type=pathlib.Path,
        help='Path to directory where you want to save result images.'
    )

    return parser.parse_args()

if __name__ == "__main__":
    args = parse_args()
    print_category_flag = False

    for model_name, model_config in MODELS_TO_TEST.items():
        print(f'Processing {model_name}.')
        for dir in args.train_dir.iterdir():
            try:
                if dir.is_dir():
                    if print_category_flag:
                        print(f'Processing {dir.stem} category.')
                    save_dir_dir = args.save_dir / model_name / args.sal_dir.stem / dir.stem
                    if save_dir_dir.exists():
                        continue
                    save_dir_dir.mkdir(exist_ok=True, parents=True)
                    ddt = DDT(model_config['model'], model_config['return_nodes'], use_cuda=True)
                    trans_vectors, descriptor_means = ddt.fit(dir, model_config['output_size'])
                    ddt.co_locate(
                        args.train_dir / dir.stem,
                        save_dir_dir,
                        args.sal_dir / dir.stem,
                        trans_vectors,
                        descriptor_means
                    )
            except RuntimeError:
                print(dir)